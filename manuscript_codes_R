if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
devtools::install_github("jbisanz/qiime2R")

##########Start here ===========================================================
library(qiime2R)
library(tidyverse)
library(ggpubr)
library(phyloseq)
library(zoo)
library(DESeq2)
library(ggplot2)

setwd("C:/Users/andia/Desktop/Purdue/Spring 2022/ANSC 595/R_Directory")

#### Load data ============================================================


## For the Disease Severity column, change those who tested negative for COVID to
# "COVID_Negative" because I dont want the disease serverity have both COVID +/-

Metadata_COVID_R$Disease_Severity[Metadata_COVID_R$COVID_Result == "Negative"] <- "COVID_Negative"

#Change data.frame name to "meta"
meta <- Metadata_COVID_R

#Filter out any row with no COVID result
meta <- filter(meta, COVID_Result != "")


evenness = read_qza("evenness_vector.qza")
evenness<-evenness$data %>% rownames_to_column("SampleID")

observed_features = read_qza("observed_features_vector.qza")
observed_features<-observed_features$data %>% rownames_to_column("SampleID")

shannon = read_qza("shannon_vector.qza")
shannon<-shannon$data %>% rownames_to_column("SampleID")

faith_pd = read_qza("faith_pd_vector.qza")
faith_pd<-faith_pd$data %>% rownames_to_column("SampleID")

str(meta)
str(observed_features)


#### Alpha diversity tables ==================================

## These tables will be merged for convenience and add to 
# the metadata table as original tutorial was organized

alpha_diversity = merge(x=faith_pd, y=evenness, by.x = "SampleID", by.y = "SampleID")
alpha_diversity = merge(alpha_diversity, observed_features, by.x = "SampleID", by.y = "SampleID")
alpha_diversity = merge(alpha_diversity, shannon, by.x = "SampleID", by.y = "SampleID")

meta = merge(meta, alpha_diversity, by.x = "id", by.y = "SampleID")
row.names(meta) = meta$id

str(meta)

#Alpha-diversity
# Alpha-diversity is within sample diversity. It is how many 
# different species (OTUs) are in each sample (richness) and how 
# evenly they are distributed (evenness), which together are diversity. 
# Each sample has one value for each metric.

## Plots for alpha diversity 

hist(meta$shannon, main="Shannon diversity", xlab="", breaks=10)
hist(meta$faith_pd, main="Faith phylogenetic diversity", xlab="", breaks=10)
hist(meta$pielou_e, main="Evenness", xlab="", breaks=10)
hist(as.numeric(meta$observed_features), main="Observed Features", xlab="", breaks=10)


## Plots the qq-plot for residuals

ggqqplot(meta$shannon, title = "Shannon")
ggqqplot(meta$faith_pd, title = "Faith PD")
ggqqplot(meta$pielou_e, title = "Evenness")
ggqqplot(meta$observed_features, title = "Observed Features")


# To test for normality statistically 
# The hypothesis is that they are normally distributed
# therefore, if the test is significant, the distribution is not normal

shapiro.test(meta$shannon) # not normal
shapiro.test(meta$pielou_e) # not normal
shapiro.test(meta$faith_pd) # normal
shapiro.test(meta$observed_features) # normal

## Run ANOVA for COVID

aov.evenness.Disease_Severity = aov(pielou_evenness ~ Disease_Severity, data=meta)
summary(aov.evenness.Disease_Severity) #not sig

TukeyHSD(aov.evenness.Disease_Severity) # none of them sig

## plot for Pielou Evenness 

boxplot(pielou_evenness ~ Disease_Severity, data=meta, ylab="Peilou evenness")


evenness_summary <- meta %>% # the names of the new data frame and the data frame to be summarised
  group_by(Disease_Severity) %>%   # the grouping variable
  summarise(mean_evenness = mean(pielou_evenness),  # calculates the mean of each group
            sd_evenness = sd(pielou_evenness), # calculates the standard deviation of each group
            n_evenness = n(),  # calculates the sample size per group
            se_evenness = sd(pielou_evenness)/sqrt(n())) # calculates the standard error of each group

# We can now make a bar plot of means vs body site, with standard 
# deviations or standard errors as the error bar. The following code 
# uses the standard deviations.

evenness_se <- ggplot(evenness_summary, aes(Disease_Severity, mean_evenness, fill = Disease_Severity)) + 
  geom_col() + 
  geom_errorbar(aes(ymin = mean_evenness - se_evenness, ymax = mean_evenness + se_evenness), width=0.2) + 
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  theme(legend.title = element_blank()) +
  labs(y="Pielou's evenness  Â± s.e.", x = "") 

######## Non-Normally distributed metrics ====================

# We will use **Faith's phylogenetic diversity** here. Since body site 
# is categorical, we use Kruskal-Wallis (non-parametric equivalent of 
# ANOVA). If we have only two levels, we would run Wilcoxon rank sum 
# test (non-parametric equivalent of t-test)

kruskal.test(faith_pd ~ Disease_Severity, data=meta)

# We can test pairwise within diseased groups with Wilcoxon Rank Sum 
# Tests. This test has a slightly different syntax than our other tests

pairwise.wilcox.test(meta$faith_pd, meta$Disease_Severity, p.adjust.method="BH") #none of them sig

## Boxplot for alpha diversity 

boxplot(faith_pd ~ Disease_Severity, data=meta, ylab="Faith phylogenetic diversity")

boxplot(observed_features ~ Disease_Severity, data=meta, ylab="Observed_Features")

boxplot(shannon_entropy ~ Disease_Severity, data=meta, ylab="Shannon")

## get data 

bc_PCoA <- read_qza("bray_curtis_pcoa_results.qza")

Severity_colors <- c("Gray", "Red", "Blue ", "Dark Green", "Orange")

bc_meta <- bc_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(meta, by = c("SampleID" = "id"))

my_column <- "Disease_Severity"



## Make a beta diversity Bray-Curtis pcoa plot basic 

ggplot(bc_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point() + #alpha controls transparency and helps when points are overlapping
  theme_q2r() +
  xlab(paste0("PC1 (", round(100*bc_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*bc_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values= Severity_colors, name = my_column)



centroids_bc <- aggregate(cbind(PC1,PC2)~get(my_column),bc_meta,mean)

## Change the name of first column into Disease_Severity

colnames(centroids_bc)[1] <- "Disease_Severity"


## Make a beta diversity Bray-Curtis pcoa plot with ellipse 

ggplot(bc_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point() + #alpha controls transparency and helps when points are overlapping
  geom_point(data=centroids_bc, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*bc_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*bc_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=Severity_colors, name = my_column)


Wuni_PCoA <- read_qza("weighted_unifrac_pcoa_results.qza")

Wuni_meta <- Wuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(meta, by = c("SampleID" = "id"))

centroids_Wuni <- aggregate(cbind(PC1,PC2)~get(my_column),Wuni_meta,mean)

## Make a Weighted unifrac beta diversity pcoa plot with ellipse 
ggplot(Wuni_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point() + #alpha controls transparency and helps when points are overlapping
  #geom_point(data=centroids_Wuni, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*Wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*Wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=Severity_colors, name = "Disease Severity")


## Make a Weighted unifrac beta diversity pcoa plot with ellipse, shape by sex

ggplot(Wuni_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point(aes(shape= Sex), size = 3) + #alpha controls transparency and helps when points are overlapping
  #geom_point(data=centroids_Wuni_, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*Wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*Wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=Severity_colors, name = "Disease Severity")



UnWuni_PCoA <- read_qza("unweighted_unifrac_pcoa_results.qza")

UnWuni_meta <- UnWuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(meta, by = c("SampleID" = "id"))

centroids_UnWuni <- aggregate(cbind(PC1,PC2)~get(my_column),UnWuni_meta,mean)

## Make a Unweighted unifrac beta diversity pcoa plot with ellipse
#alpha controls transparency and helps when points are overlapping #geom_point(data=centroids_UnWuni, size = 3) 
ggplot(UnWuni_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point() + 
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*UnWuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*UnWuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=Severity_colors, name = "Disease Severity")


## Make a Unweighted unifrac beta diversity pcoa plot with ellipse, shape by sex
#alpha controls transparency and helps when points are overlapping #geom_point(data=centroids_UnWuni_, size = 3) 
ggplot(UnWuni_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point(aes(shape= Sex), size = 3) + 
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*UnWuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*UnWuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=Severity_colors, name = "Disease Severity")

## get data for Jaccard pcoa
Jaccard_PCoA <- read_qza("jaccard_pcoa_results.qza")

## Add Jaccard pcoa results.qza into the metadata for covid positive only
Jaccard_meta <- Jaccard_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(meta, by = c("SampleID" = "id"))


centroids_Jaccard <- aggregate(cbind(PC1,PC2)~get(my_column),Jaccard_meta,mean)

## Make a Jaccard beta diversity pcoa plot with ellipse 
ggplot(Jaccard_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point() + 
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*Jaccard_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*Jaccard_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=Severity_colors, name = "Disease Severity")


## Make a Jaccard beta diversity pcoa plot with ellipse, shape by sex

ggplot(Jaccard_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point(aes(shape= Sex), size = 3) + #alpha controls transparency and helps when points are overlapping
  #geom_point(data=centroids_Wuni_, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*Jaccard_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*Jaccard_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=Severity_colors, name = "Disease Severity")


#### Taxonomy ==============================================================================================

str(meta)

levels(meta$Disease_Severity)

meta$Disease_Severity_ord = 
  factor(meta$Disease_Severity, c("Mild", "Moderate", "Severe", "Critical", "COVID_Negative"))

levels(meta$Disease_Severity_ord)

taxonomy <- read_qza("taxonomy.qza")

head(taxonomy$data)

tax.clean<-parse_taxonomy(taxonomy$data)

head(tax.clean)


tax.clean[is.na(tax.clean)] <- ""
for (i in 1:nrow(tax.clean)){
  if (tax.clean[i,2] == ""){
    kingdom <- paste("Kingdom_", tax.clean[i,1], sep = "")
    tax.clean[i, 2:7] <- kingdom
  } else if (tax.clean[i,3] == ""){
    phylum <- paste("Phylum_", tax.clean[i,2], sep = "")
    tax.clean[i, 3:7] <- phylum
  } else if (tax.clean[i,4] == ""){
    class <- paste("Class_", tax.clean[i,3], sep = "")
    tax.clean[i, 4:7] <- class
  } else if (tax.clean[i,5] == ""){
    order <- paste("Order_", tax.clean[i,4], sep = "")
    tax.clean[i, 5:7] <- order
  } else if (tax.clean[i,6] == ""){
    family <- paste("Family_", tax.clean[i,5], sep = "")
    tax.clean[i, 6:7] <- family
  } else if (tax.clean[i,7] == ""){
    tax.clean$Species[i] <- paste("Genus",tax.clean$Genus[i], sep = "_")
  }
}

### I exported the edited/cleaned meta data to the folder so I can use it (disease severity -> COVID neg)
## write.csv(meta, "Meta_clean.csv", row.names = FALSE)##

physeq <- qza_to_phyloseq(
  features="rarefied_table.qza",
  tree="rooted-tree.qza",
  taxonomy = "taxonomy.qza",
  metadata = "Meta_clean.txt"
)

physeq_otu_table <- data.frame(otu_table(physeq), check.names = F)

tax.clean = tax.clean[row.names(tax.clean) %in% rownames(physeq_otu_table),]

metadata.filtered = meta[row.names(meta) %in% colnames(physeq_otu_table),]

#Assign as variables to be feed into phyloseq
OTU.physeq = otu_table(as.matrix(physeq_otu_table), taxa_are_rows=TRUE)

#our edited and formatted taxonomy table from the top of this script
tax.physeq = tax_table(as.matrix(tax.clean))    
meta.physeq = sample_data(metadata.filtered)

physeq_bar_plot = phyloseq(OTU.physeq, tax.physeq, meta.physeq)

# Set colors for plotting
my_colors <- c(
  '#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c',
  '#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928', 
  "#CBD588", "#5F7FC7", "orange","#DA5724", "#508578", "#CD9BCD",
  "#AD6F3B", "#673770","#D14285", "#652926", "#C84248", 
  "#8569D5", "#5E738F","#D1A33D", "#8A7C64", "#599861", "gray", "black"
)

my_level <- c("Phylum", "Family", "Genus")

#this is the metadata column that we will use in the taxa barplot
my_column <- "Disease_Severity"  

# duplicate but different #

# my_column_COVID <- "COVID_Result"
# my_column_Sex <- "Sex"

abund_filter <- 0.03

#ml ="Genus"
for(ml in my_level){print(ml)}

taxa.summary <- physeq_bar_plot %>%
  tax_glom(taxrank = ml, NArm = FALSE) %>%  # agglomerate at `ml` level
  transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
  psmelt()  %>%                               # Melt to long format
  group_by(get(my_column), get(ml)) %>%
  summarise(Abundance.average=mean(Abundance)) 

# Duplicate but different #

# taxa.summary <- physeq_bar_plot %>%
#  tax_glom(taxrank = ml, NArm = FALSE) %>%  # agglomerate at `ml` level
#  transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
#  psmelt()  %>%                               # Melt to long format
#  group_by(get(my_column_COVID), get(ml)) %>%
#  summarise(Abundance.average=mean(Abundance)) 


# taxa.summary <- physeq_bar_plot %>%
#  tax_glom(taxrank = ml, NArm = FALSE) %>%  # agglomerate at `ml` level
#  transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
#  psmelt()  %>%                               # Melt to long format
#  group_by(get(my_column_Sex), get(ml)) %>%
#  summarise(Abundance.average=mean(Abundance)) 


taxa.summary <- as.data.frame(taxa.summary)

colnames(taxa.summary)[1] <- my_column
colnames(taxa.summary)[2] <- ml

physeq.taxa.max <- taxa.summary %>% 
  group_by(get(ml)) %>%
  summarise(overall.max=max(Abundance.average))


physeq.taxa.max <- as.data.frame(physeq.taxa.max)

colnames(physeq.taxa.max)[1] <- ml

# merging the phyla means with the metadata #
physeq_meta <- merge(taxa.summary, physeq.taxa.max)

physeq_meta_filtered <- filter(physeq_meta, overall.max>abund_filter)


physeq_meta_filtered$Disease_Severity_ord = 
  factor(physeq_meta_filtered$Disease_Severity, 
         c("COVID_Negative", "Mild", "Moderate", "Severe", "Critical"))

## Re-order the levels for the disease severity
physeq_meta_filtered$Disease_Severity <- factor(physeq_meta_filtered$Disease_Severity, 
                                                levels = c("COVID_Negative", "Mild", "Moderate", "Severe", "Critical"))

# Plot 
ggplot(physeq_meta_filtered, aes(x = get(my_column), y = Abundance.average, fill = get(ml))) + 
  #facet_grid(.~LitterTreatment) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = my_colors) +
  # Remove x axis title
  #theme(axis.title.x = element_blank()) + 
  ylim(c(0,1)) +
  guides(fill = guide_legend(reverse = F, keywidth = .5, keyheight = .5, ncol = 1)) +
  theme(legend.text=element_text(size=8)) +
  #theme(legend.position="bottom") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  theme(legend.title = element_blank()) +
  ylab("Relative Abundance") +
  xlab(my_column_Sex) +
  ggtitle(paste0(ml, " (>", abund_filter * 100,"%) in at least 1 sample")) 

#First get the OTU table from physeq

physeq_otu_table <- data.frame(otu_table(physeq), check.names = FALSE)

#To use DESeq, we need no zeros in our OTU table. So we will edit the table by multiplying by 2 and + 1

OTU.clean2 <- physeq_otu_table + 1

#Now make the phyloseq object:


OTU.physeq = otu_table(as.matrix(OTU.clean2), taxa_are_rows=TRUE)
tax.physeq = tax_table(as.matrix(tax.clean))
meta.physeq = sample_data(metadata.filtered)

#We then merge these into an object of class phyloseq.

physeq_deseq = phyloseq(OTU.physeq, tax.physeq, meta.physeq)

#The following two lines actually do all the complicated DESeq2 work. 
#The function phyloseq_to_deseq2 converts your phyloseq-format 
#microbiome data into a DESeqDataSet with dispersions estimated, 
#using the experimental design formula, also shown (the ~body.site term). 
#The DESeq function does the rest of the testing, 
#in this case with default testing framework, 
#but you can actually use alternatives.

diagdds = phyloseq_to_deseq2(physeq_deseq, ~ COVID_Result)

#the test type of "Wald" tests for significance of coefficients in a Negative Binomial GLM. This is generally a pretty good assumption for sequencing experiments. This was designed with RNA-seq in mind, but also pretty good for 16S sequencing.
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")


###Investigate test results table

#The following results function call creates a table of the results of the tests. 
#Very fast. 
#The hard work was already stored with the rest of the DESeq2-related data 
#in our latest version of the diagdds object (see above). 
#I then order by the adjusted p-value, removing the entries with an NA value. 
#The rest of this example is just formatting the results table with taxonomic 
#information for nice(ish) display in the HTML output.

#Contrast: this argument specifies what comparison to extract from the object 
#to build a results table. There are exactly three elements:

#  1. the name of a factor in the design formula, 
#  2. the name of the numerator level for the fold change, and 
#  3. the name of the denominator level for the fold change (simplest case)

alpha = 0.05

my_contrast = 
  c("COVID_Result","Positive","Negative" ) 



res = results(diagdds, contrast = my_contrast, cooksCutoff = FALSE)

sigtab = res[which(res$padj < alpha), ]

sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq_deseq)[rownames(sigtab), ], "matrix"))

###Volcano Plot

with(res, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-15,15)))

# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)

with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))

with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))


#Let's look at the OTUs that were significantly different between 
#the two treatment groups. The following makes a nice 
#ggplot2 summary of the results.

theme_set(theme_bw())

scale_fill_discrete <- function(palname = "Set1", ...)
{
  scale_fill_brewer(palette = palname, ...)
} 

# Phylum order
#x = tapply(sigtab$log2FoldChange, sigtab$Phylum, function(x) max(x))
#x = sort(x, TRUE)
#sigtab$Phylum = factor(as.character(sigtab$Phylum), levels=names(x))
# Genus order

x = tapply(sigtab$log2FoldChange, sigtab$Genus, function(x) max(x))

x = sort(x, TRUE)

sigtab$Genus = factor(as.character(sigtab$Genus), levels=names(x))

DESeq_fig = ggplot(sigtab, aes(x=Genus, y = log2FoldChange, color=Phylum)) + 
  geom_point(size=3) + 
  ylab(paste0("(", my_contrast[2], "/", my_contrast[3], ")\n", "log2FoldChange")) +
  scale_color_manual(values = my_colors[c(4,6,8,10,12,14,16,18,20)]) +
  #ylim(0,8) +
  theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))

DESeq_fig

########PICRUSt ==============================================================================
physeq_Picrust <- qza_to_phyloseq(
  features="pathway_abundance.qza",
  metadata = "Meta_clean.txt"
)

physeq_otu_table_picrust <- data.frame(otu_table(physeq_Picrust), check.names = F)

OTU.clean2_picrust <-physeq_otu_table_picrust +1


OTU.physeq_Picrust = otu_table(as.matrix(physeq_otu_table_picrust), taxa_are_rows=TRUE)


meta.physeq_Picrust = sample_data(metadata.filtered)
meta.physeq_Picrust$COVID_Result <- as.factor(meta.physeq_Picrust$COVID_Result)

physeq_Picrust = phyloseq(OTU.physeq_Picrust, meta.physeq_Picrust)



diagdds_Picrust = phyloseq_to_deseq2(physeq_Picrust, ~ COVID_Result)

diagdds_Picrust = DESeq(diagdds_Picrust, test="Wald", fitType="parametric")

my_contrast_Picrust <- c("COVID_Result", "Positive", "Negative")

res_Picrust <- results(diagdds_Picrust,
                       contrast = my_contrast_Picrust,
                       cooksCutoff = FALSE)

sigtab_Picrust <- res_Picrust[which(res_Picrust$padj< 0.1),]

sigtab_Picrust <- as(sigtab_Picrust,"data.frame")


x = sigtab_Picrust$log2FoldChange
names(x) <- row.names(sigtab_Picrust)

x = sort(x, TRUE)

sigtab_Picrust$pathway <- row.names(sigtab_Picrust)
sigtab_Picrust$pathway = factor(as.character(sigtab_Picrust$pathway, levels = FALSE))
str(sigtab_Picrust$pathway)

sigtab_Picrust$Genus = factor(as.character(sigtab_Picrust$Genus), levels=names(x))

DESeq_fig_Picrust = ggplot(sigtab_Picrust, 
                           aes(x= pathway, y = log2FoldChange)) + 
  geom_point(size=3) + 
  ylab(paste0("(", my_contrast_Picrust[2], "/", my_contrast_Picrust[3], ")\n", "log2FoldChange")) +
  scale_color_manual(values = my_colors[c(4,6,8,10,12,14,16,18,20)]) +
  theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))

DESeq_fig_Picrust

